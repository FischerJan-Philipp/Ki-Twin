Welches Betriebssystem muss eine virtuelle Maschine haben, wenn das Host OS ein Ubuntu (Linux) ist? 
* kann alle haben


Welche drei wesentlichen Service Modelle des Cloud Computing gibt es? 
* Software as a Service (SaaS)
* Infrastructure as a Service (IaaS)
* Platform as a Service (PaaS)


Was ist der Unterschied zwischen der vertikalen und der horizontalen Skalierung? 
* vertikal ist das Erweitern der Rechenleistung einer Einheit
* horizontal ist das Hinzufügen von Einheiten


Aus welchen Komponenten besteht die Three-Tier Architecture?
* Server
* Client
* Database


Was ist der Unterschied zwischen einem Application Server und einem Web Server?
* Webserver verarbeitet nur statischen Content mit dem HTTP-Protokoll
* Application Server kann eine Anwendung ausführen


Hat ein Docker Container ein eigenes Betriebssystem?
* nein


Welches Betriebssystem muss installiert sein, um eine Container Engine auszuführen?
* Linux, Windows, Mac


Worin unterscheiden sich virtuelle Maschinen und Docker Container?
* Docker Container
   * hat kein eigenes Betriebssystem
   * Apps von mehreren Containern teilen das selbe Betriebssystem (Host OS)
   * schneller
* VM
   * hat eigenes Betriebssystem
   * langsamer


Was ist der Unterschied zwischen einem Dockerfile und einem Docker Compose File?
* Dockerfile erweitert ein Image und beschreibt damit ein neues Image
* Docker-Compose File startet Images


Welche Techniken bzw. Vorgehensweisen können angewendet werden, um Fehlkonfigurationen bei unerwarteten Verhalten eines laufenden Docker Containers zu identifizieren?
* Docker Logs überprüfen
* Files in Container directories checken
* Ressourcennutzunng überprüfen


Welches Protokoll nutzt ein Web Server, um statischen Content über das Netzwerk zur Verfügung zu stellen?
* HTTP


Was ist der Unterschied zwischen HTTP und HTTPS?
* HTTPS → verschlüsselte Daten
* HTTP → unverschlüsselte Daten, als Klartext lesbar


Was beschreibt der Content-Type? (Kennen Sie ein Beispiel?)
* das File Format, was angefragt / gesendet wird
* Bsp.: video/mp4


Welche wesentlichen Methoden existieren beim HTTP Protokoll?
* GET
* PUT
* PATCH
* POST
* DELETE
* HEAD
* CONNECTION
* OPTIONS


Welche zwei Arten der Content Negotiation gibt es?
* Server-driven
   * im Server definierte Settings
* Agent-driven
   * Server schickt akzeptierte Formate, wenn Request Format nicht vorhanden
* Wird Content Negotiation bei APIs verwendet?
   * ja


Welche HTTP Parameter können verwendet werden, um Informationen bei einem GET Request an den Server zu übertragen?
* Body
* Header
* Query
* Path


Welche HTTP Methoden dürfen den Zustand auf dem Server ändern?
* POST
* PUT
* PATCH
* DELETE


Wie können verschachtelte Ressourcen in einer relationalen Datenbank gespeichert werden?
* über Many-to-Many oder One-to-Many Beziehungen




Welche Annotation ist erforderlich, um eine Java Klasse als Entität zu kennzeichnen?
* ‘@Entity’


Was ist die „owning side“ bei einem Object-Relational Mapping (ORM)?
* gibt bei einer One-to-Many Beziehung die Seite an, die den Fremdschlüssel “besitzt”
   * z.B. Person und IdDocuments → IdDocuments ist owning side


Was ist der Unterschied zwischen dem Lazy und dem Eager Loading? 
* Lazy: Daten werden erst geladen, wenn sie benötigt werden
* Eager: Es werden alle assoziierten Daten einer Entität bei der Abfrage geladen


Wodurch unterscheidet sich die Jakarta Persistence Query Language von der normalen SQL Syntax?
* Man kann Entity Objekte mit JPQL Abfragen, was mit SQL nicht geht


        Kann man Daten mit JPQL ändern?
* ja es gibt einen UPDATE Befehl, auch DELETE




Wann benötigen wir eine Transaktion?  
* Wenn wir auf die Datenbank schreiben (POST, PATCH, PUT, DELETE)


Was sind die vier Schlüsseleigenschaften einer Transaktion? Atomicity, Consistency, Isolation, and Durability
* Atomicity
   * Transaktion geht entweder ganz oder gar nicht durch
* Consistency
   * alle Regeln müssen erfüllt sein: constraints, cascades, triggers
* Isolation
   * die Datenbank hat den gleichen Zustand nach einer Transaktion mit mehreren schritten, wie nach mehreren Transaktionen mit den gleichen Änderungen aufgeteilt
* Durability
   * wenn eine transaction committed ist, bleibt sie committed


Wie wird ein Transaction Rollback getriggert?
* automatisch bei ‘@Transactional’
* in einem catch block, bei einer Exception abfangen, bei einer injecteten UserTransaction


Wie reduzieren wir die Angreifbarkeit einer Anwendung?
* mit Validations: Authorization and Authentication
* so früh wie möglich Abfangen
   * 1. Access Control
   * 2. Business Logic
   * 3. Data Layer
* timeouts, request rates
* mit Constraints


Wie verhindern wir eine SQL Injection in JPA?
* Named Queries nutzen
* Variable als Parameter geben


Welche Daten sollte man cachen und welche besser nicht?
* Daten die lange gespeichert werden sollen und wichtig sind sollten nicht gecached werden
* Daten, die oft geladen werden sollten gecached werden


Wie kann der Browser Cache kontrolliert werden?
* der kann über den Header des Servers bei einer Response
* “max-age”, “no-cache”, “no-store”


Wieso ist ein Distributed Cache schneller als eine Datenbank?
* weil die Daten auf dem RAM gespeichert werden


Worin unterscheidet sich der Key eines Redis von einem primär Schlüssel einer SQL Datenbank?
* in einer Datenbank werden Primärschlüssel indexiert, für schnellere Suche
* Redis keys sind nicht abhängig von einer Tabelle, sondern gelten für den gesamten Redis Cache
* Redis Key ist ein String, SQL Datenbank PK ist ein numerischer Wert


Wofür steht die Abkürzung TTL?
* time to live


Kann der gleiche Redis Key für unterschiedliche Datentypen verwendet werden?
* nein


Kann der Datentyp nach der Erzeugung geändert werden?
* nein der key muss gelöscht und neu erstellt werden


Welche Datenstruktur eignet sich besonders gut zum Speichern von „ Likes“ zu User Content?
* SortedSet, da hier ein score zu jedem wer mitgegeben werden kann


Wann ist eine Transaktion bei einem Distributed Cache nötig?
* wenn man sicherstellen will, dass mehrere Befehle zusammen ausgeführt werden
* Konsistente Aktualisierung
* Vermeidung von Dateninkonsistenz


Was sind die fünf wesentlichen Eigenschaften einer Microservice-Architektur?
* lose gekoppelte Services
* Services von kleinen Teams gecodet
* Ausfallsicherheit - einzelne Services können ausfallen → ganzes funktioniert noch
* Skalierbarkeit - jeder Service kann einzeln skaliert werden
* Services sind eigenständige Dienste, die bestimmte Geschäftsfunktionen abbilden


Worin unterscheidet sich eine Single Page Application von einem Composite User Interface?
* Single Page Application fragt aktualisiert einzelne HTML Inhalte mit dem Empfangen von Änderungen im JSON Format
* bei dem Composite User Interface stellt ein Service einen Bereich bei einer Web Application dar und ist selbst verantwortlich dafür, z.B. wie bei Amazon


Mit welchen Situationen muss ein Microservice umgehen können? Und wie kann das API Gateway dabei helfen?
* Sicherheit - Validation
* bei Ausfall eines abhängigen Services - das API Gateway kann caching ermöglichen
* Überwachung - API Gateway kann Metriken sammeln → Leistungsprobleme erkennen


Welche zwei wesentlichen Communication Pattern gibt es? 
* synchrone und asynchrone


Wie unterscheidet sich eine Pull Architecture von einer Push Architecture?
* Pull - es wird vom Subscriber immer nachgefragt, ob ein neues Event vorhanden ist
* Push - der Publisher benachrichtigt den Subscriber automatisch bei einem neuen Event


Welche Vorteile bietet die asynchrone Verarbeitung?
* Entkopplung von Sender und Empfänger → man muss nicht warten
* Skalierbarkeit - Sender kann viel mehr Nachrichten senden
* Nachrichten können zwischengespeichert werden in Message Brokern


Wann benötigt man eine Message Queue?
* wenn Events nicht direkt verarbeitet werden sollen müssen
* Zwischenspeichern von Events
* Entkoppeln von Sender und Empfänger
* Fehlertoleranz - Sender oder Empfänger kann ausfallen und der andere kann selbstständig weiter mit der Message Queue arbeiten


Aus welchen Bestandteilen besteht ein Topic in Kafka?
* Partitions
   * Offset
   * Event


Mit welchem Verfahren wird ein Event einer Partition zugeteilt?
* Hashing


Vier Vorteile von verteilten Anwendungen gegenüber Workstation Anwendungen?
* Skalierbarkeit: horizontal und vertikal
* Verfügbarkeit für viele User
* Ausfallsicherheit
* Hardware nicht an einen Händler gebunden
* Flexibilität - Einheiten tauschen


Drei fundamentale Service Modelles des Cloud Computing?
* PaaS
* IaaS
* SaaS


Drei der vier Deployment Modelle des Cloud Computing
* Private
* Public
* Hybrid


Vier Vorteile einer Microservice Architektur gegenüber einer monolithischen Architektur
* können unabhängig entwickelt werden
* keine Downtimes beim Deployen
* Ausfallsicher
* Skalierung - können unabhängig voneinander skaliert werden


Unterschied Dockerfile und Docker-Compose File
* Dockerfile beschreibt ein Image, erweitert ein Image
* Docker-Compose File startet container


Unterschied normaler Jar und Uber-Jar (auch fat Jar genannt)?
* Uber-Jar enthält dependencies
* Uber-jar kann man starten
* Jar enthält nur die Java Klassen (Code)


Wie viele Applikationen können gleichzeitig auf einen Port lauschen?
* 1


Unterschiede zwischen Web Server und Application Server?
* Web Server liefert - verarbeitet statische Inhalte
* Application Server - Application läuft darauf (führt code aus) 


________________


RESTful APIs
  



Request Header
HTTP Request
GET /api/v1/topics/stephan HTTP/1.1
Accept-Language: de
Accept: application/xml


Response Header
HTTP Response
HTTP/1.1 200 OK
Content-Type: application/xml
Cache-Control: private, max-age=60
Response Body
<topic>stephan-de</topic>




________________
Middleware-Konzepte
Wer entscheidet beim HTTP Caching über das Caching-Verhalten und wie wird das Caching-Verhalten gesteuert?
* header parameter vom Host (server)


zwei Anwendungsfälle für einen Distributed Cache und erläutere die Vorteile?
* wenn man verkraften kann, dass die Daten verloren gehen
   * Arbeitsspeicher verliert Daten beim PC Neustart
* wenn oft die gleichen Daten abgefragt werden
* es geht schnell




zwei Anwendungsfälle für einen Message Broker und erläutere die Vorteile?
* Microservices können über Broker kommunizieren
* Entkopplung zwischen Sender und Empfänger
   * Anfragen können nacheinander abgewickelt werden, asynchrone Verarbeitung


Wofür steht Abkürzung TTL:
* time to live
   * redis: “TTL”
   * http caching: “max-age”
   * kafka: “retention”