Klausurthemen:
redis caching, rest mit http, allgemein fragen, kafka messaging




* Verwendung von Standards, um nicht abhängig von Systemen wie z.B. Spring zu sein
   * Programmieren “gegen” Standards
   * x








2. Vorlesung
* Application Server:
   * jede Application läuft einzeln auf einem separaten ClassLoader
  







* .jar hat ordnerstruktur
   * mit Manifestdatei → mit Aufbau der Klassen
   * Class Files


Quarkus
* hat eine .jar-Datei


Midnight Commander
* zum navigieren in Dateien wie .jar


Wildfly
* hat .war-Datei
________________


Application Server vs. Web Server Deployment
  





OS VIrtualization
* Um Container auszuführen, brauchen wir eine Container-Engine wie z.B. Docker
* Control Groups: Isolierung von Containern und Limitierung und Verwaltung von Ressourcen


* Container basiert immer auf Linux-Betriebssystem (er denkt er wird auf einem Linux-Betriebssystem ausgeführt)
* Container haben kein Betriebssystem


Comparison of Containers and Virtual Machines
 


Images und Container
* image wie Klasse und Container wie Objekt




________________


4. Vorlesung
        Dockerfile:
  



FROM: verweist auf das Basis-Dockerfile des Dockerfiles
COPY: kopiert Dateien von lokalen Dateisystem auf das Dateisystem des Containers
RUN: führt Kommandos im Image aus
ENV: deklarieren von environment variables


-v (volume) :  Befehl gibt dem Container eine Festplatte und “sieht diese”


5. Vorlesung
k








Probleme Monolith
* down time, da programm komplett deployed werden muss bei Änderungen
* * * * 2. tests
* remaining balance